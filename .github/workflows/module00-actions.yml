name: Module Tests

on:
  push:
    #branches: [ main ]
    paths:
      - 'Module00/ex02/**'
      - 'Module00/ex03/**'
      - '.github/workflows/module00-actions.yml'
  pull_request:
    #branches: [ main ]
    paths:
      - 'Module00/ex02/**'
      - 'Module00/ex03/**'
      - '.github/workflows/module00-actions.yml'

jobs:
  check-modified-folders:
    runs-on: ubuntu-latest
    outputs:
      modified_folders: ${{ steps.get-folders.outputs.folders }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Needed for comparing changes

    - name: Get modified folders
      id: get-folders
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "^module/ex[0-9][0-9]*/" | cut -d/ -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
        else
          CHANGED=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep "^module/ex[0-9][0-9]*/" | cut -d/ -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
        fi
        echo "folders=$CHANGED" >> $GITHUB_OUTPUT
        echo "Modified folders: $CHANGED"

  build-and-test:
    needs: check-modified-folders
    runs-on: ubuntu-latest
    if: fromJSON(needs.check-modified-folders.outputs.modified_folders)[0] != null

    strategy:
      matrix:
        folder: ${{ fromJSON(needs.check-modified-folders.outputs.modified_folders) }}
      fail-fast: false

    defaults:
      run:
        working-directory: module/${{ matrix.folder }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup compiler and tools
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make valgrind

    - name: Check Makefile exists
      run: |
        if [ ! -f "Makefile" ]; then
          echo "::error::Makefile not found in ${{ matrix.folder }}"
          exit 1
        fi

    - name: Compile
      run: |
        make
        if [ ! -f "./program" ]; then
          echo "::error::Executable 'program' not created"
          exit 1
        fi

    - name: Run tests
      run: |
        if [ -f "./test.sh" ]; then
          chmod +x ./test.sh
          ./test.sh
        else
          echo "Running executable directly..."
          ./program
        fi

    - name: Check memory leaks
      run: |
        valgrind --leak-check=full \
                 --show-leak-kinds=all \
                 --track-origins=yes \
                 --verbose \
                 --error-exitcode=1 \
                 ./program

    - name: Clean
      run: make fclean
